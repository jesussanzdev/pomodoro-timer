{"version":3,"sources":["media/BeepSound.wav","serviceWorker.js","timerStates.js","TimerDisplay/components/TimerDisplay.jsx","TimerButton/components/TimerButton.jsx","TimerConfig/components/TimerConfig.jsx","Timer/components/Timer.jsx","TimerHeader/components/TimerHeader.jsx","App.js","index.js"],"names":["module","exports","__webpack_require__","p","d","__webpack_exports__","unregister","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","NOT_SET","leftPad","val","concat","TimerDisplay","props","react_default","a","createElement","className","timerState","id","src","beepSound","type","autoPlay","style","alarmColor","timerType","currentTime","get","library","add","faPlay","faStop","faPause","TimerButton","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getButton","bind","assertThisInitialized","react","disabled","enablePlay","onClick","startTimer","index_es","icon","stopTimer","pauseTimer","Component","faMinusCircle","faPlusCircle","TimerConfig","htmlFor","decrementTimer","baseTime","incrementTimer","decrementBreak","breakLength","incrementBreak","href","Timer","state","moment","duration","currentBreakLength","timerStates","timer","color","setBaseTime","reduceTimer","completeTimer","newBaseTime","setState","newBreakLength","setInterval","clearInterval","newTime","subtract","warning","parseInt","setBreakLength","_timer","components_TimerDisplay","components_TimerButton","components_TimerConfig","Header","App","TimerHeader","components_Timer","r","global","react__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_1___default","n","react_dom__WEBPACK_IMPORTED_MODULE_2__","react_dom__WEBPACK_IMPORTED_MODULE_2___default","_App__WEBPACK_IMPORTED_MODULE_4__","_serviceWorker__WEBPACK_IMPORTED_MODULE_5__","jQuery","require","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6c653e6e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/BeepSound.988833bf.wav\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const NOT_SET = 0;\r\nexport const RUNNING = 1;\r\nexport const BREAK = 2;\r\n","import React from 'react';\r\nimport * as timerStates from '../../timerStates';\r\nimport beepSound from '../../media/BeepSound.wav';\r\n\r\nconst leftPad = (val) => {\r\n    if (val < 10) return `0${val}`;\r\n\r\n    return `${val}`;\r\n}\r\n\r\nconst TimerDisplay = (props) => (\r\n    <div>\r\n        <div className=\"row mx-auto\">\r\n            {\r\n                (props.timerState === timerStates.BREAK)\r\n                && <audio id=\"alarm\" src={beepSound} type=\"audio/mp3\" autoPlay/> \r\n            }\r\n            {\r\n                (props.timerState === timerStates.RUNNING)\r\n                && <audio id=\"alarm\" src={beepSound} type=\"audio/mp3\" autoPlay/>      \r\n            }     \r\n        </div>\r\n        <div className=\"timer\" style={props.alarmColor}>\r\n            <div className=\"timer-wrapper\">\r\n                <div className=\"timer-label\">\r\n                    {props.timerType}\r\n                </div> \r\n                <div className=\"time-counter\">\r\n                    {`${leftPad(props.currentTime.get('minutes'))}:${leftPad(props.currentTime.get('seconds'))}`}\r\n                </div>      \r\n            </div>      \r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default TimerDisplay;","import React, { Fragment, Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { faPlay, faStop, faPause } from \"@fortawesome/free-solid-svg-icons\";\r\nlibrary.add(faPlay, faStop, faPause);\r\n\r\nclass TimerButton extends Component {\r\n    constructor(){\r\n        super();\r\n\r\n        this.getButton = this.getButton.bind(this);\r\n    }\r\n\r\n    getButton() {\r\n\r\n            return(  \r\n            <Fragment>\r\n                <button disabled={!this.props.enablePlay} className=\"btn-media\" onClick={this.props.startTimer}> \r\n                     <FontAwesomeIcon icon=\"play\" />\r\n                 </button>\r\n                <button className=\"btn-media mx-auto\" onClick={this.props.stopTimer}> \r\n                    <FontAwesomeIcon icon=\"stop\" />\r\n                </button>\r\n                <button className=\"btn-media\" onClick={this.props.pauseTimer}> \r\n                    <FontAwesomeIcon icon=\"pause\" />\r\n                </button>\r\n            </Fragment>\r\n            );\r\n         \r\n    }\r\n\r\n   render() {\r\n       return (\r\n        <div className=\"media-container\">\r\n            {this.getButton()}\r\n        </div>\r\n       );\r\n   };\r\n}\r\n\r\nexport default TimerButton;","import React, {Fragment, Component} from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { faMinusCircle, faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nlibrary.add(faMinusCircle, faPlusCircle);\r\n\r\nclass TimerConfig extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <div className=\"set-timer\" >\r\n                    <h2 className=\"mx-auto\">SET TIMER</h2>\r\n                </div>\r\n                <div className=\"row set-timer\">\r\n                \r\n                    <div className=\"col-sm-3\">\r\n                        <label htmlFor=\"sessionID\">Session Length</label>                \r\n                    </div>\r\n                    <div className=\"col-sm-1\">\r\n                        <button className=\"btn-level\" onClick={this.props.decrementTimer}> \r\n                            <FontAwesomeIcon icon=\"minus-circle\" />\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"col-sm-1\">\r\n                        <div className=\"d-inline\" id=\"sessionID\">{this.props.baseTime.get('minutes')}</div>\r\n                    </div>\r\n                    <div className=\"col-sm-1\">\r\n                        <button className=\"btn-level\" onClick={this.props.incrementTimer}>\r\n                                <FontAwesomeIcon icon=\"plus-circle\" />\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"col-sm-3\">\r\n                        <label htmlFor=\"breakID\">Break Length</label>                \r\n                    </div>\r\n                    <div className=\"col-sm-1\">\r\n                        <button className=\"btn-level\" onClick={this.props.decrementBreak}> \r\n                            <FontAwesomeIcon icon=\"minus-circle\" />\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"col-sm-1\">\r\n                        <div className=\"d-inline\" id=\"breakID\">{this.props.breakLength}</div>\r\n                    </div>\r\n                    <div className=\"col-sm-1\">\r\n                        <button className=\"btn-level\" onClick={this.props.incrementBreak}>\r\n                            <FontAwesomeIcon icon=\"plus-circle\" />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row set-timer\">\r\n                    <div className=\"developer mx-auto\"> Designed and Coded by <br />\r\n                    <a href=\"https://github.com/jesussanzdev\"> \r\n                        Jesús Sanz\r\n                    </a>\r\n                </div>\r\n            </div>         \r\n\r\n            </Fragment>\r\n        )\r\n    }\r\n} \r\n   \r\nexport default TimerConfig;","import React, {Component} from 'react';\r\nimport moment from 'moment';\r\nimport TimerDisplay from '../../TimerDisplay/components/TimerDisplay';\r\nimport TimerButton from '../../TimerButton/components/TimerButton';\r\nimport TimerConfig from '../../TimerConfig/components/TimerConfig';\r\nimport * as timerStates from '../../timerStates';\r\n\r\n\r\nclass Timer extends Component {\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            currentTime: moment.duration(25, 'minutes'),\r\n            baseTime: moment.duration(25, 'minutes'),\r\n            breakLength: 4,\r\n            currentBreakLength: 4,\r\n            timerState: timerStates.NOT_SET,\r\n            timerType: \"SESSION\",\r\n            enablePlay: true,\r\n            timer: null,\r\n            alarmColor: {color: 'rgb(238, 231, 238)'}\r\n        };\r\n\r\n        this.setBaseTime = this.setBaseTime.bind(this);\r\n        this.startTimer = this.startTimer.bind(this);\r\n        this.stopTimer = this.stopTimer.bind(this);\r\n        this.reduceTimer = this.reduceTimer.bind(this);\r\n        this.pauseTimer = this.pauseTimer.bind(this);\r\n        this.completeTimer = this.completeTimer.bind(this);\r\n        this.decrementTimer = this.decrementTimer.bind(this);\r\n        this.incrementTimer = this.incrementTimer.bind(this);\r\n        this.decrementBreak = this.decrementBreak.bind(this);\r\n        this.incrementBreak = this.incrementBreak.bind(this);\r\n    }\r\n\r\n    setBaseTime(newBaseTime) {\r\n        this.setState({\r\n            baseTime: newBaseTime,\r\n            currentTime: newBaseTime,\r\n        });\r\n    }\r\n\r\n    setBreakLength(newBreakLength) {\r\n        this.setState({\r\n            breakLength: newBreakLength,\r\n            currentBreakLength: newBreakLength,\r\n        });\r\n    }\r\n\r\n    startTimer(){\r\n\r\n        if(this.state.timerState === timerStates.BREAK){\r\n            this.setState({\r\n                currentTime: moment.duration(this.state.currentBreakLength, 'minutes'),\r\n                timerType: \"BREAK\",\r\n                timerState: null,\r\n                timer: setInterval(this.reduceTimer, 1000),\r\n                enablePlay: false\r\n            })\r\n        }\r\n        //Session time\r\n        else{\r\n            this.setState({\r\n                timerState: timerStates.RUNNING,\r\n                timerType: \"SESSION\",\r\n                timer: setInterval(this.reduceTimer, 1000),\r\n                enablePlay: false\r\n            })\r\n        }\r\n    }\r\n\r\n    stopTimer(){\r\n        //If clock is working (the timer is set) and has any value restart it\r\n        if (this.state.timer){\r\n            clearInterval((this.state.timer))\r\n        }\r\n        //Not set mode\r\n        this.setState({\r\n            timerState: timerStates.NOT_SET,\r\n            timer: null,\r\n            timerType: \"SESSION\",\r\n            alarmColor: {color: 'rgb(238, 231, 238)'},\r\n            currentTime: moment.duration(this.state.baseTime),\r\n            enablePlay: true\r\n        });\r\n    }\r\n\r\n    pauseTimer(){\r\n           //If clock is working (the timer is set) and has any value restart it\r\n        if (this.state.timer){\r\n            clearInterval((this.state.timer))\r\n        }\r\n        //Not set mode\r\n        this.setState({\r\n            timer: null,\r\n            enablePlay: true\r\n        });\r\n    }\r\n\r\n    reduceTimer(){\r\n      if (this.state.currentTime.get('minutes') === 0\r\n               && this.state.currentTime.get('seconds') === 0) {\r\n            this.completeTimer();\r\n            return;\r\n        } \r\n\r\n      const newTime = moment.duration(this.state.currentTime);\r\n      newTime.subtract(1, 'seconds');\r\n      this.warning(newTime);\r\n\r\n      this.setState({\r\n          currentTime: newTime\r\n      });\r\n    }\r\n\r\n    completeTimer() {\r\n     //If clock is working (the timer is set) and has any value restart it\r\n        if (this.state.timer){\r\n            clearInterval((this.state.timer))\r\n        }\r\n     //If clock has finished session mode, change the state to break mode and start the timer\r\n        if(this.state.timerState === timerStates.RUNNING){\r\n            this.setState({\r\n                timerState: timerStates.BREAK,\r\n                timer: null,\r\n            })\r\n            this.startTimer();\r\n        }\r\n        else{\r\n        //If clock has finished break mode, change the state to session mode and restart the timer\r\n            this.setState({\r\n                currentTime: moment.duration(this.state.baseTime, 'minutes'),\r\n                timerState: timerStates.RUNNING,\r\n                timer: null,\r\n            })\r\n            this.startTimer();\r\n        }\r\n    }\r\n\r\n    decrementTimer() {\r\n        let newBaseTime = this.state.baseTime;\r\n\r\n        if (newBaseTime.get('minutes') > 1){\r\n            newBaseTime.subtract(1, 'minutes')\r\n            this.setBaseTime(newBaseTime);\r\n        }else if (newBaseTime.get('minutes') === 1){\r\n            newBaseTime.add(parseInt(58, 10), 'minutes');\r\n            this.setBaseTime(newBaseTime);\r\n        }\r\n    }\r\n\r\n    incrementTimer() {\r\n        let newBaseTime = this.state.baseTime;\r\n\r\n        if (newBaseTime.get('minutes') === 59){\r\n            newBaseTime.add(parseInt(1, 10), 'minutes');\r\n        }\r\n        newBaseTime.add(parseInt(1, 10), 'minutes');\r\n\r\n        this.setBaseTime(newBaseTime);\r\n    }\r\n\r\n    decrementBreak() {\r\n        let newBreakLength = this.state.breakLength;\r\n\r\n        if (newBreakLength > 1){\r\n            newBreakLength -= 1;\r\n            this.setBreakLength(newBreakLength);\r\n        }else if (newBreakLength === 1){\r\n            newBreakLength = 9;\r\n            this.setBreakLength(newBreakLength);\r\n        }\r\n    }\r\n\r\n    incrementBreak() {\r\n        let newBreakLength = this.state.breakLength;\r\n\r\n        if (newBreakLength < 9){\r\n            newBreakLength += 1;\r\n            this.setBreakLength(newBreakLength);\r\n        }\r\n        else if(newBreakLength === 9){\r\n            newBreakLength = 1;\r\n            this.setBreakLength(newBreakLength);\r\n        }\r\n    }\r\n\r\n    warning(_timer) {\r\n        _timer.get('minutes') < 1 ? this.setState({alarmColor: {color: 'rgb(255, 150, 150) '}}) : this.setState({alarmColor: {color: 'rgb(238, 231, 238)'}});\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n        <div className=\"container-fluid\">\r\n            <TimerDisplay \r\n                currentTime={this.state.currentTime}\r\n                timerState={this.state.timerState}\r\n                timerType={this.state.timerType}\r\n                alarmColor={this.state.alarmColor}\r\n\r\n            />\r\n            <TimerButton\r\n                enablePlay={this.state.enablePlay}\r\n                startTimer={this.startTimer}\r\n                stopTimer={this.stopTimer}\r\n                pauseTimer={this.pauseTimer}\r\n                timerState={this.state.timerState}/>\r\n            {\r\n                //If the timerState is NOT_SET the timerConfig is evaluated\r\n                (this.state.timerState === timerStates.NOT_SET)\r\n                &&\r\n                (<TimerConfig \r\n                baseTime={this.state.baseTime}\r\n                breakLength={this.state.breakLength}\r\n                decrementTimer={this.decrementTimer}\r\n                incrementTimer={this.incrementTimer}\r\n                decrementBreak={this.decrementBreak}\r\n                incrementBreak={this.incrementBreak}\r\n\r\n                />)\r\n            }  \r\n        </div>\r\n        );    \r\n    }\r\n}\r\n\r\n\r\nexport default Timer;","import React from 'react';\r\n\r\nconst Header = () => (\r\n    <div className=\"row\">\r\n        <h1 className=\"mx-auto\">POMODORO TIMER</h1> \r\n    </div>\r\n);\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\nimport Timer from './Timer/components/Timer';\nimport './App.scss';\nimport Header from './TimerHeader/components/TimerHeader';\n\nclass App extends Component {\n  render(){\n    return (\n      <div className=\"panel panel-default app-content d-block mx-auto\">\n        <div className=\"panel-body\">\n          <Header />\n          <Timer />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nglobal.jQuery = require('jquery');\nrequire('bootstrap');\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}